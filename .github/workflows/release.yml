name: Build and Release

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          sudo apt-get install -y libboost-all-dev # Установка Boost

      - name: Configure project with CMake
        run: |
          mkdir build
          cd build
          cmake .. || { echo "CMake configuration failed"; exit 1; }

      - name: Build the project
        run: |
          cd build
          cmake --build . || { echo "Build failed"; exit 1; }

      - name: Package the project
        run: |
          cd build
          cpack -G DEB || { echo "Package creation failed"; exit 1; }
          
          # Убедитесь, что ../build_output - это каталог
          if [ -e ../build_output ]; then
              if [ ! -d ../build_output ]; then
                  echo "../build_output exists but is not a directory. Removing it."
                  rm ../build_output # Удаляем, если это файл
              fi
          fi
          
          mkdir -p ../build_output # Создаем каталог
          cp *.deb ../build_output/ # Копируем пакет в выходной каталог

      - name: Upload package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-package
          path: build_output/*.deb

  build_macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          brew install cmake
          brew install boost # Установка Boost

      - name: Configure project with CMake
        run: |
          mkdir build
          cd build
          cmake .. || { echo "CMake configuration failed"; exit 1; }

      - name: Build the project
        run: |
          cd build
          cmake --build . || { echo "Build failed"; exit 1; }

      - name: Package the project
        run: |
          cd build
          cpack -G productbuild || { echo "Package creation failed"; exit 1; }
          mkdir -p ../build_output # Создаем каталог, если он не существует
          cp *.pkg ../build_output/ # Копируем пакет в выходной каталог

      - name: Upload package as artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-package
          path: build_output/*.pkg

  release:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # Указываем платформы для сборки

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up environment
        run: |
          echo "Setting up environment for ${{ matrix.os }}"

      - name: Build project
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "Building for Ubuntu"
            # Ваши команды для сборки на Ubuntu
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Building for macOS"
            # Ваши команды для сборки на macOS
          fi
      
      - name: List files in the build directory
        run: ls -R build # Обновите на ваш путь, где находятся собранные файлы

      - name: Package files
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "Packaging Ubuntu files"
            zip -r myapp-ubuntu.zip build/* # Обновите на ваш путь
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Packaging macOS files"
            zip -r myapp-macos.zip build/* # Обновите на ваш путь
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            Changes in this release:
            - Add your changes here
          files: |
            myapp-ubuntu.zip
            myapp-macos.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
