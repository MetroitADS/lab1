name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      
      # Установка зависимостей
      - name: Install Dependencies
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install libboost-test-dev -y
          else
            brew update && brew install boost
          fi
      
      # Сборка проекта
      - name: Build Project
        run: |
          cmake . -DPATCH_VERSION=${{ github.run_number }}
          cmake --build .
      
      # Тестирование
      - name: Run Tests
        run: cmake --build . --target test
      
      # Создание пакета
      - name: Create Package
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cpack -G DEB
          else
            cpack -G RPM # Или другой формат для macOS, если необходимо
          fi

      # Проверка наличия созданного пакета
      - name: Check for Package
        run: |
          echo "Current directory contents:"
          ls -la ./
          echo "Searching for packages:"
          find . -name "*.pkg" -o -name "*.deb"

      # Проверка существования тега
      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin | grep "refs/tags/v${{ github.run_number }}" || echo "")
          echo "TAG_EXISTS=$TAG_EXISTS" >> $GITHUB_ENV

      # Создание релиза
      - name: Create Release
        id: create_release
        if: env.TAG_EXISTS == ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      # Загрузка Release Asset для Linux
      - name: Upload Linux Release Asset
        id: upload-linux-asset
        if: steps.create_release.outcome == 'success' && runner.os == 'Linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/octet-stream

      # Загрузка Release Asset для macOS
      - name: Upload macOS Release Asset
        id: upload-macos-asset
        if: steps.create_release.outcome == 'success' && runner.os == 'macOS'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Darwin.pkg
          asset_name: helloworld-0.0.${{ github.run_number }}-Darwin.pkg
          asset_content_type: application/octet-stream
