name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

permissions:
  contents: write
  packages: write

jobs:
  build_macos:
    runs-on: macos-latest
    outputs:
      pkg_path: ${{ steps.set_pkg_path.outputs.pkg_path }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - run: brew update && brew install boost

      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target package

      - name: Set .pkg file path
        id: set_pkg_path
        run: |
          PKG_FILE=$(find . -name "*.pkg" | head -n 1)
          if [[ -z "$PKG_FILE" ]]; then
            echo "No .pkg file found."
            exit 1
          else
            echo "pkg_path=$(realpath "$PKG_FILE")" >> $GITHUB_ENV
            echo "::set-output name=pkg_path::$(realpath "$PKG_FILE")"
          fi

  build_ubuntu:
    runs-on: ubuntu-latest
    outputs:
      deb_path: ${{ steps.set_deb_path.outputs.deb_path }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - name: Create Debian Package
        run: cpack -G DEB

      - name: Set .deb file path
        id: set_deb_path
        run: |
          DEB_FILE=$(find . -name "*.deb" | head -n 1)
          if [[ -z "$DEB_FILE" ]]; then
            echo "No .deb file found."
            exit 1
          else
            echo "deb_path=$(realpath "$DEB_FILE")" >> $GITHUB_ENV
            echo "::set-output name=deb_path::$(realpath "$DEB_FILE")"
          fi

  release:
    needs: [build_macos, build_ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        run: |
          TAG="v${{ github.run_number }}"
          echo "::set-output name=tag_name::$TAG"
          echo "::set-output name=release_name::Release $TAG"
          
          if git ls-remote --tags origin | grep -q "$TAG"; then
            echo "Tag $TAG already exists."
            exit 0
          fi

          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"tag_name\":\"$TAG\", \"name\":\"Release $TAG\"}" \
            "https://api.github.com/repos/${{ github.repository }}/releases"

      - name: Upload Release Asset for macOS
        if: env.PKG_FILE_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.PKG_FILE_PATH }}
          asset_name: ${{ env.PKG_FILE_PATH }} # Используем полное имя
          asset_content_type: application/octet-stream

      - name: Upload Release Asset for Ubuntu
        if: env.DEB_FILE_PATH != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEB_FILE_PATH }}
          asset_name: ${{ env.DEB_FILE_PATH }} # Используем полное имя
          asset_content_type: application/octet-stream

