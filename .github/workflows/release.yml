name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:
  build_macos:
    runs-on: macos-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: brew update && brew install boost # Установка Boost через Homebrew
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - run: ls -la # Отобразить список файлов в текущем каталоге
      - run: find . -name "*.pkg" # Найти все .pkg файлы в проекте
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }} # Используем формат тега
          release_name: Release v${{ github.run_number }} # Используем формат названия релиза
          draft: false
          prerelease: false

      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Darwin.pkg # Путь к файлу для macOS
          asset_name: helloworld-0.0.${{ github.run_number }}-Darwin.pkg # Имя файла для macOS
          asset_content_type: application/octet-stream

  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target package

      - name: Check existing tag
        id: check_tag
        run: |
          if git tag | grep -q "v${{ github.run_id }}"; then
            echo "Tag already exists. Exiting."
            exit 1
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_id }} # Уникальный ID сборки
          release_name: Release v${{ github.run_id }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/octet-stream

  upload_artifacts:
    runs-on: ubuntu-latest
    needs: [build_macos, build_ubuntu]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download macOS artifact
        uses: actions/download-artifact@master
        with:
          name: macos

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@master
        with:
          name: ubuntu

      - name: Upload to Release (macOS pkg)
        uses: JasonEtco/upload-to-release@v0.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ./helloworld-0.0.${{ github.run_number }}-Darwin.pkg application/octet-stream

      - name: Upload to Release (Linux deb)
        uses: JasonEtco/upload-to-release@v0.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ./helloworld-0.0.${{ github.run_number }}-Linux.deb application/octet-stream
